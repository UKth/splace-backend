// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  userId         Int        @id @default(autoincrement())
  username       String     @unique
  name           String     @db.VarChar(255)
  email          String     @db.VarChar(255)
  password       String     @db.VarChar(255)
  profileMessage String?    @db.VarChar(255)
  profileImageUrl   String?    @db.VarChar(255)
  joinedAt       DateTime   @default(now())
  authority      String     @db.VarChar(255) @default("user")
  currentLog   Decimal? @db.Decimal(11, 8)
  currentLat   Decimal? @db.Decimal(11, 8)
  
  followers      User[]     @relation("followRelation")
  
  followings     User[]     @relation("followRelation")
  
  folders        Folder[]  @relation("folderRelation")
  
  photologs      Photolog[]
  
  likedPhotologs Photolog[] @relation("likedRelation")
  
  Series         Series[]

  scraps       Scrap[]

  comments     Comment[]

  likedComments Comment[] @relation("likedCommentRelation")
}

model Photolog {
  photologId Int       @id @default(autoincrement())
  title String @db.VarChar(255)
  imageUrls  String[]  @db.VarChar(255)
  photoSize  Int
  text       String?    @db.Text
  createdAt  DateTime  @default(now())
  
  author       User      @relation(fields: [authorId], references: [userId])
  authorId     Int
  
  splace     Splace?    @relation(fields: [splaceId], references: [splaceId])
  splaceId   Int?
  
  series     Series?    @relation(fields: [seriesId], references: [seriesId])
  seriesId   Int?
  
  hashtags   Hashtag[]
  
  likedUser  User[]    @relation("likedRelation")

  scrap Scrap[]

  comments Comment[]
}

model Series {
  seriesId  Int        @id @default(autoincrement())
  title     String     @db.VarChar(255)
  createdAt DateTime   @default(now())
  
  author      User       @relation(fields: [authorId], references: [userId])
  authorId    Int
  
  photologs Photolog[]
}

model Splace {
  splaceId Int     @id @default(autoincrement())
  name     String  @db.VarChar(255)
  geolog   Decimal? @db.Decimal(11, 8)
  geolat   Decimal? @db.Decimal(11, 8)
  address        String?   @db.VarChar(255)
  createdAt   DateTime @default(now())
  ownerId Int?
  
  timeSets   TimeSet[]

  items           Item[]
  
  badges         Badge[]
  
  ratingtags    Ratingtag[]   
  
  hashtags      Hashtag[]
  
  fixedContents FixedContent[]
  
  photologs Photolog[]
  
  saves       Save[]
}

model TimeSet {
  timeSetId Int @id @default(autoincrement())
  open DateTime  @db.Time()
  close DateTime @db.Time()
  day Int
  splace Splace? @relation(fields: [splaceId], references: [splaceId])
  splaceId  Int?
}

model FixedContent {
  fixedContentId Int      @id @default(autoincrement())
  title          String   @db.VarChar(255)
  imageUrl       String?   @db.VarChar(255)
  createdAt      DateTime @default(now())
  text           String?  @db.VarChar(255)
  
  splace         Splace?   @relation(fields: [splaceId], references: [splaceId])
  splaceId       Int?
}

model Ratingtag {
  ratingtagId Int      @id @default(autoincrement())
  name        String   @db.VarChar(255) @unique
  
  splaces      Splace[]
}

model Badge {
  badgeId Int      @id @default(autoincrement())
  name    String   @db.VarChar(255) @unique
  
  splaces  Splace[]
}

model Save {
  saveId    Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  
  splace    Splace?   @relation(fields: [splaceId], references: [splaceId])
  splaceId  Int?
  
  folder    Folder?   @relation(fields: [folderId], references: [folderId])
  folderId  Int?
}

model Scrap {
  scrapId    Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  
  photolog    Photolog?   @relation(fields: [photologId], references: [photologId])
  photologId  Int?
  
  savedUser User? @relation(fields: [savedUserId], references: [userId])
  savedUserId Int?
}

model Folder {
  folderId  Int      @id @default(autoincrement())
  title     String   @db.VarChar(255)
  createdAt DateTime @default(now())
  
  members   User[] @relation("folderRelation")
  
  saves     Save[]
}

model Hashtag {
  hashtagId Int @id @default(autoincrement())
  name     String   @db.VarChar(255) @unique
  
  photologs Photolog[]
  
  splaces   Splace[]
}

model Item {
  itemId Int @id @default(autoincrement())
  
  splace Splace @relation(fields: [splaceId], references: [splaceId])
  splaceId Int
}


model Comment {
  commentId Int @id @default(autoincrement())
  
  text String @db.VarChar(255)
  createdAt DateTime @default(now())

  author User? @relation(fields: [authorId], references: [userId])
  authorId Int?

  likedUsers User[] @relation("likedCommentRelation")

  photolog Photolog? @relation(fields: [photologId], references: [photologId])
  photologId Int?
}
