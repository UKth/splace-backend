// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id         Int        @id @default(autoincrement())
  username       String     @unique
  name           String?     @db.VarChar(255)
  email          String     @db.VarChar(255)
  password       String     @db.VarChar(255)
  profileMessage String?    @db.VarChar(255)
  profileImageUrl   String?    @db.VarChar(255)
  joinedAt       DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  authority      String     @db.VarChar(255) @default("user")
  currentLog   Decimal? @db.Decimal(11, 8)
  currentLat   Decimal? @db.Decimal(11, 8)
  credit       Int    @default(0)
  lockedCredit  Int   @default(0)  
  
  followers      User[]     @relation("followRelation")
  
  followings     User[]     @relation("followRelation")
  
  folders        Folder[]  @relation("folderRelation")
  
  photologs      Photolog[]
  
  likedPhotologs Photolog[] @relation("likedRelation")
  
  Series         Series[]

  scraps       Scrap[]

  comments     Comment[]

  likedComments Comment[] @relation("likedCommentRelation")

  messages  Message[]

  chatrooms Chatroom[]

  moments   Moment[]

  hiddenPhotologs Photolog[] @relation("hiddenLogsRelation")

  hiddenSeries    Series[]   @relation("hiddenSeriesRelation")

  hiddenMoment    Moment[]   @relation("hiddenMomentRelation")

  blockedUser    User[]     @relation("blockRelation")

  blockingUser   User[]     @relation("blockRelation")
}

model Photolog {
  id Int       @id @default(autoincrement())
  title String @db.VarChar(255)
  imageUrls  String[]  @db.VarChar(255)
  photoSize  Int
  text       String?    @db.Text
  createdAt  DateTime  @default(now())
  updatedAt      DateTime   @updatedAt
  
  author       User      @relation(fields: [authorId], references: [id])
  authorId     Int
  
  splace     Splace?    @relation(fields: [splaceId], references: [id])
  splaceId   Int?
  
  series     Series[]    @relation("seriesRelation")
  
  hashtags   Hashtag[]
  
  likedUser  User[]    @relation("likedRelation")

  scrap Scrap[]

  comments Comment[]

  hiddenUsers User[]  @relation("hiddenLogsRelation")
}

model Series {
  id  Int        @id @default(autoincrement())
  title     String     @db.VarChar(255)
  createdAt DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  
  author      User       @relation(fields: [authorId], references: [id])
  authorId    Int
  
  photologs Photolog[]   @relation("seriesRelation")

  hiddenUsers  User[]   @relation("hiddenSeriesRelation")
}

model Splace {
  id Int     @id @default(autoincrement())
  name     String  @db.VarChar(255)
  geolog   Decimal? @db.Decimal(11, 8)
  geolat   Decimal? @db.Decimal(11, 8)
  address        String?   @db.VarChar(255)
  createdAt   DateTime @default(now())
  updatedAt      DateTime   @updatedAt
  ownerId Int?
  parking  Boolean?
  pets     Boolean?      
  kids     Boolean?
  
  timeSets   TimeSet[]

  items           Item[]
  
  badges         Badge[]
  
  ratingtags    Ratingtag[]   
  
  hashtags      Hashtag[]
  
  fixedContents FixedContent[]
  
  photologs Photolog[]
  
  saves       Save[]
}

model TimeSet {
  id Int @id @default(autoincrement())
  open DateTime  @db.Time()
  close DateTime @db.Time()
  day Int
  splace Splace? @relation(fields: [splaceId], references: [id])
  splaceId  Int?
  isBreakTime Boolean @default(false)
}

model FixedContent {
  id Int      @id @default(autoincrement())
  title          String   @db.VarChar(255)
  imageUrl       String?   @db.VarChar(255)
  createdAt      DateTime @default(now())
  updatedAt      DateTime   @updatedAt
  text           String?  @db.Text
  
  splace         Splace?   @relation(fields: [splaceId], references: [id])
  splaceId       Int?
}

model Ratingtag {
  id Int      @id @default(autoincrement())
  name        String   @db.VarChar(255) @unique
  
  splaces      Splace[]
}

model Badge {
  id Int      @id @default(autoincrement())
  name    String   @db.VarChar(255) @unique
  
  splaces  Splace[]
}

model Save {
  id    Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  
  splace    Splace?   @relation(fields: [splaceId], references: [id])
  splaceId  Int?
  
  folder    Folder?   @relation(fields: [folderId], references: [id])
  folderId  Int?
}

model Scrap {
  id    Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  
  photolog    Photolog?   @relation(fields: [photologId], references: [id])
  photologId  Int?
  
  savedUser User? @relation(fields: [savedUserId], references: [id])
  savedUserId Int?
}

model Folder {
  id  Int      @id @default(autoincrement())
  title     String   @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt      DateTime   @updatedAt
  
  members   User[] @relation("folderRelation")
  
  saves     Save[]
}

model Hashtag {
  id Int @id @default(autoincrement())
  name     String   @db.VarChar(255) @unique
  
  photologs Photolog[]
  
  splaces   Splace[]
}

model Item {
  id Int @id @default(autoincrement())
  
  splace Splace @relation(fields: [splaceId], references: [id])
  splaceId Int
}


model Comment {
  id Int @id @default(autoincrement())
  
  text String @db.Text
  createdAt DateTime @default(now())
  updatedAt      DateTime   @updatedAt

  author User? @relation(fields: [authorId], references: [id])
  authorId Int?

  likedUsers User[] @relation("likedCommentRelation")

  photolog Photolog? @relation(fields: [photologId], references: [id])
  photologId Int?
}

model PaymentLog {
  id Int @id @default(autoincrement())

  customerId Int
  merchantUId String @db.VarChar(255) @unique
  credit Int

  creditGiven Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt      DateTime   @updatedAt
}

model BuyLog {
  id Int @id @default(autoincrement())

  itemId Int
  shopId Int
  credit Int

  createdAt DateTime @default(now())
  updatedAt      DateTime   @updatedAt
}

model Chatroom {
  id Int @id @default(autoincrement())
  title String   @db.VarChar(255)
  members User[]
  messages Message[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Message {
  id Int @id @default(autoincrement())
  text String   @db.Text
  author User @relation(fields: [authorId], references: [id])
  authorId Int

  chatroom Chatroom @relation(fields: [chatroomId], references: [id])
  chatroomId Int

  unreadCount Int

  createdAt DateTime  @default(now())
}

model Moment {
  id Int @id @default(autoincrement())
  text String? @db.Text
  author User @relation(fields: [authorId], references: [id])
  authorId Int

  videoUrl String? @db.VarChar(255)
  
  createdAt DateTime @default(now())

  address String @db.VarChar(255)

  hiddenUsers  User[]  @relation("hiddenMomentRelation")
}