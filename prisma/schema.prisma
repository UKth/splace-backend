// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["orderByRelation"]
}

model User {
  id         Int        @id @default(autoincrement())
  username       String     @unique
  name           String?     @db.VarChar(255)
  email          String?     @db.VarChar(255)
  password       String     @db.VarChar(255)
  profileMessage String?    @db.VarChar(255)
  profileImageUrl   String?    @db.VarChar(255)
  birthDay      DateTime?   
  joinedAt       DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  authority      String     @db.VarChar(255) @default("user")
  credit       Int    @default(0)
  lockedCredit  Int   @default(0)
  url          String?   @db.VarChar(255)
  phone        String?   @db.VarChar(255)
  activate    Boolean   @default(true)  
  
  followers      User[]     @relation("followRelation")
  
  followings     User[]     @relation("followRelation")
  
  folders        Folder[]  @relation("folderRelation")
  
  photologs      Photolog[]
  
  likedPhotologs Photolog[] @relation("likedRelation")
  
  Series         Series[]

  scrapedLog       ScrapedLog[]

  scrapedSeries    ScrapedSeries[]

  comments     Comment[]

  likedComments Comment[] @relation("likedCommentRelation")

  messages  Message[]

  chatrooms Chatroom[]

  moments   Moment[]

  saves    Save[]

  mySplaces Splace[] 

  buyRaffleLogs BuyRaffleLog[]

  hiddenPhotologs Photolog[] @relation("hiddenLogsRelation")

  hiddenSeries    Series[]   @relation("hiddenSeriesRelation")

  blockedUser    User[]     @relation("blockRelation")

  blockingUser   User[]     @relation("blockRelation")

  chatroomReaded ChatroomReaded[]

  myReports Report[]

  followLogs FollowLog[] @relation("followLogRelation")

  followedLogs FollowLog[] @relation("followedLogRelation")

  likeLogs LikeLog[] @relation("likeLogRelation")

  editFolderLogs EditFolderLog[] @relation("editFolderRelation")
}

model Photolog {
  id Int       @id @default(autoincrement())
  title String @db.VarChar(255)
  imageUrls  String[]  @db.VarChar(255)
  photoSize  Int
  text       String?    @db.Text
  createdAt  DateTime  @default(now())
  updatedAt      DateTime   @updatedAt
  isPrivate Boolean @default(false)
  
  author       User      @relation(fields: [authorId], references: [id])
  authorId     Int
  
  splace     Splace?    @relation(fields: [splaceId], references: [id])
  splaceId   Int?
  
  series     Series[]    @relation("seriesRelation")
  
  categories   Category[]

  bigCategories BigCategory[]

  specialtags Specialtag[]
  
  likedUser  User[]    @relation("likedRelation")

  scrap ScrapedLog[]

  comments Comment[]

  hiddenUsers User[]  @relation("hiddenLogsRelation")

  likedLogs LikeLog[] @relation("likedLogRelation")
}

model Series {
  id  Int        @id @default(autoincrement())
  title     String     @db.VarChar(255)
  createdAt DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  isPrivate Boolean @default(false)
  
  author      User       @relation(fields: [authorId], references: [id])
  authorId    Int
  
  scrap ScrapedSeries[]

  photologs Photolog[]   @relation("seriesRelation")

  hiddenUsers  User[]   @relation("hiddenSeriesRelation")
}

model Splace {
  id Int     @id @default(autoincrement())
  name     String  @db.VarChar(255)
  lat Decimal? @db.Decimal(11,8)
  lon Decimal? @db.Decimal(11,8)
  address        String?   @db.VarChar(255)
  detailAddress String? @db.VarChar(255)
  createdAt   DateTime @default(now())
  updatedAt      DateTime   @updatedAt
  ownerId Int?
  kakaoId Int?
  parking  Boolean @default(false)
  pets     Boolean @default(false)      
  noKids     Boolean @default(false)
  intro    String? @db.Text
  url      String? @db.VarChar(255)
  phone    String? @db.VarChar(255)
  thumbnail String? @db.Text
  activate Boolean @default(false)
  breakDays Int[]
  menuUrls String[] @db.VarChar(255)
  itemName String? @db.VarChar()
  itemPrice Int?
  holidayBreak Boolean @default(false) 

  timeSets   TimeSet[]

  owner User? @relation(fields: [ownerId], references: [id])
  
  ratingtags    Ratingtag[]   
  
  categories      Category[]

  bigCategories   BigCategory[]

  specialtags   Specialtag[]
  
  fixedContents FixedContent[]
  
  photologs Photolog[]
  
  saves       Save[]

  moments     Moment[]

  raffle Raffle[]
}

model TimeSet {
  id Int @id @default(autoincrement())
  open DateTime?  @db.Time()
  close DateTime? @db.Time()
  breakOpen DateTime? @db.Time()
  breakClose DateTime? @db.Time()
  day Int
  splace Splace? @relation(fields: [splaceId], references: [id])
  splaceId  Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FixedContent {
  id Int      @id @default(autoincrement())
  title          String   @db.VarChar(255)
  imageUrl       String?   @db.VarChar(255)
  createdAt      DateTime @default(now())
  updatedAt      DateTime   @updatedAt
  text           String?  @db.Text
  
  splace         Splace?   @relation(fields: [splaceId], references: [id])
  splaceId       Int?
}

model Save {
  id    Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  splace    Splace?   @relation(fields: [splaceId], references: [id])
  splaceId  Int?
  
  folder    Folder?   @relation(fields: [folderId], references: [id])
  folderId  Int?

  savedUser User?     @relation(fields: [userId], references: [id])
  userId    Int?
}

model ScrapedLog {
  id    Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  photolog    Photolog?   @relation(fields: [photologId], references: [id])
  photologId  Int?
  
  savedUser User? @relation(fields: [savedUserId], references: [id])
  savedUserId Int?
}

model ScrapedSeries {
  id    Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  series    Series?   @relation(fields: [seriesId], references: [id])
  seriesId  Int?
  
  savedUser User? @relation(fields: [savedUserId], references: [id])
  savedUserId Int?
}

model Folder {
  id  Int      @id @default(autoincrement())
  title     String   @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt      DateTime   @updatedAt
  
  members   User[] @relation("folderRelation")
  
  saves     Save[]

  editedFolderLogs EditFolderLog[] @relation("editedFolderRelation")
}

model Category {
  id Int @id @default(autoincrement())
  name     String   @db.VarChar(255) @unique
  
  photologs Photolog[]
  
  splaces   Splace[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BigCategory {
  id Int @id @default(autoincrement())
  name     String   @db.VarChar(255) @unique
  
  photologs Photolog[]
  
  splaces   Splace[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Specialtag {
  id Int @id @default(autoincrement())
  name     String   @db.VarChar(255) @unique
  color    String   @db.VarChar(255)
  
  photologs Photolog[]
  
  splaces   Splace[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Ratingtag {
  id Int @id @default(autoincrement())
  name     String   @db.VarChar(255) @unique
  color    String   @db.VarChar(255)
  
  splaces   Splace[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id Int @id @default(autoincrement())
  
  text String @db.Text
  createdAt DateTime @default(now())
  updatedAt      DateTime   @updatedAt

  author User? @relation(fields: [authorId], references: [id])
  authorId Int?

  likedUsers User[] @relation("likedCommentRelation")

  photolog Photolog? @relation(fields: [photologId], references: [id])
  photologId Int?
}

model PaymentLog {
  id Int @id @default(autoincrement())

  customerId Int
  merchantUId String @db.VarChar(255) @unique
  credit Int

  creditGiven Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt      DateTime   @updatedAt
}

model BuyRaffleLog {
  id Int @id @default(autoincrement())

  raffle Raffle @relation(fields: [raffleId], references: [id])
  raffleId Int
  customer User @relation(fields: [customerId], references: [id])
  customerId Int
  credit Int

  createdAt DateTime @default(now())
  updatedAt      DateTime   @updatedAt
}

model Raffle {
  id Int @id @default(autoincrement())

  name String @db.VarChar(255)
  dDay DateTime
  imageUrls String[] @db.VarChar(255)

  credit Int

  splace Splace? @relation(fields: [splaceId], references: [id])
  splaceId Int?

  info String? @db.Text

  buyLog BuyRaffleLog[]
}

model Chatroom {
  id Int @id @default(autoincrement())
  title String   @db.VarChar(255)
  members User[]
  messages Message[]
  isPersonal Boolean

  chatroomReaded ChatroomReaded[]

  lastMessage Message? @relation("lastMessageRelation", fields: [lastMessageId], references: [id])
  lastMessageId Int?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model ChatroomReaded {
  id Int @id @default(autoincrement())
  user User? @relation(fields: [userId], references: [id])
  userId Int?

  chatroom Chatroom? @relation(fields: [chatroomId], references: [id])
  chatroomId Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id Int @id @default(autoincrement())
  text String   @db.Text
  author User @relation(fields: [authorId], references: [id])
  authorId Int

  chatroom Chatroom @relation(fields: [chatroomId], references: [id])
  chatroomId Int

  lastChatroom Chatroom? @relation("lastMessageRelation")

  createdAt DateTime  @default(now())
  updatedAt DateTime @updatedAt
}

model Moment {
  id Int @id @default(autoincrement())
  text String? @db.Text
  title String @db.Text
  author User @relation(fields: [authorId], references: [id])
  authorId Int

  splace Splace? @relation(fields: [splaceId], references: [id])
  splaceId Int?

  videoUrl String? @db.VarChar(255)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Report {
  id Int @id @default(autoincrement())
  sourceType String @db.VarChar(255)
  sourceId Int?
  reportedUser User @relation(fields: [userId], references: [id])
  userId Int
  reason String? @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FollowLog {
  id Int @id @default(autoincrement())
  target User @relation("followedLogRelation", fields: [targetId], references: [id])
  targetId Int
  requestUser User @relation("followLogRelation", fields: [requestUserId], references: [id])
  requestUserId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EditFolderLog {
  id Int @id @default(autoincrement())
  target Folder @relation("editedFolderRelation", fields: [targetId], references: [id])
  targetId Int
  requestUser User @relation("editFolderRelation", fields: [requestUserId], references: [id])
  requestUserId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LikeLog {
  id Int @id @default(autoincrement())
  target Photolog @relation("likedLogRelation", fields: [targetId], references: [id])
  targetId Int
  requestUser User @relation("likeLogRelation", fields: [requestUserId], references: [id])
  requestUserId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}