// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  userId         Int        @id @default(autoincrement())
  username       String     @unique
  name           String     @db.VarChar(255)
  email          String     @db.VarChar(255)
  password       String     @db.VarChar(255)
  profileMessage String?    @db.VarChar(255)
  profilePhoto   String?    @db.VarChar(255)
  folders        Folder[]
  joinedAt       DateTime   @default(now())
  followers      User[]     @relation("followRelation")
  followings     User[]     @relation("followRelation")
  photologs      Photolog[]
  likedPhotologs Photolog[] @relation("likedRelation")
  Save           Save[]
  Series         Series[]
}

model Photolog {
  photologId Int       @id @default(autoincrement())
  imageUrls  String[]  @db.VarChar(255)
  text       String    @db.Text
  splace     Splace    @relation(fields: [splaceId], references: [splaceId])
  hashtags   Hashtag[]
  createdAt  DateTime  @default(now())
  series     Series    @relation(fields: [seriesId], references: [seriesId])
  splaceId   Int
  user       User      @relation(fields: [userId], references: [userId])
  userId     Int
  likedUser  User[]    @relation("likedRelation")
  seriesId   Int
}

model Series {
  seriesId  Int        @id @default(autoincrement())
  user      User       @relation(fields: [userId], references: [userId])
  userId    Int
  title     String     @db.VarChar(255)
  createdAt DateTime   @default(now())
  photologs Photolog[]
}

model Splace {
  splaceId Int     @id @default(autoincrement())
  name     String  @db.VarChar(255)
  geolog   Decimal @db.Decimal(10, 8)
  geolat   Decimal @db.Decimal(10, 8)

  address        String   @db.VarChar(255)
  operatingTimes String[] @db.VarChar(255)
  menu           String?  @db.VarChar(255)
  item           String?  @db.VarChar(255)
  Badges         Badge[]

  RatingTags    RatingTag      @relation(fields: [ratingTagId], references: [ratingTagId])
  hashtags      Hashtag[]
  fixedcontents FixedContent[]
  // badges        Badge[]

  photologs Photolog[]

  createdAt   DateTime @default(now())
  Saves       Save[]
  ratingTagId Int
}

model FixedContent {
  fixedContentId Int      @id @default(autoincrement())
  splace         Splace   @relation(fields: [splaceId], references: [splaceId])
  title          String   @db.VarChar(255)
  imageUrl       String   @db.VarChar(255)
  createdAt      DateTime @default(now())
  splaceId       Int
}

// model Liked {
//   likedId    Int      @id @default(autoincrement())
//   log        Log      @relation(fields: [logId], references: [logId])
//   user       User     @relation(fields: [userUserId], references: [userId])
//   createdAt  DateTime @default(now())
//   logId      Int
//   userUserId Int
// }

model RatingTag {
  ratingTagId Int      @id @default(autoincrement())
  name        String   @db.VarChar(255)
  splace      Splace[]
}

model Badge {
  badgeId Int      @id @default(autoincrement())
  name    String   @db.VarChar(255)
  splace  Splace[]
}

model Save {
  saveId    Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [userId])
  splace    Splace   @relation(fields: [splaceId], references: [splaceId])
  folder    Folder   @relation(fields: [folderId], references: [folderId])
  createdAt DateTime @default(now())
  userId    Int
  splaceId  Int
  folderId  Int
}

model Folder {
  folderId  Int      @id @default(autoincrement())
  title     String   @db.VarChar(255)
  members   User[]
  createdAt DateTime @default(now())
  Save      Save[]
}

model Hashtag {
  name     String     @id @db.VarChar(255)
  photolog Photolog[]
  splace   Splace[]   @relation(fields: [splaceId], references: [splaceId])
  splaceId Int?
}

// data logs
