// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id         Int        @id @default(autoincrement())
  username       String     @unique @db.Text
  name           String?     @db.Text
  email          String?     @db.Text
  password       String     @db.Text
  profileMessage String?    @db.Text
  profileImageUrl   String?    @db.Text
  birthDay      DateTime?   
  createdAt       DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  authority      String     @db.Text @default("user")
  credit       Int    @default(0)
  lockedCredit  Int   @default(0)
  url          String?   @db.Text
  phone        String   @unique @db.Text
  activate    Boolean   @default(true)
  preference  Int[]
  noticeReaded DateTime @default(now())
  marketingAgree Boolean @default(false)     

  
  folders       Folder[]
  
  photologs      Photolog[]
  
  Series         Series[]
  
  scrapedLog       ScrapedLog[]
  
  scrapedSeries    ScrapedSeries[]
  
  comments     Comment[]
  
  likedComments Comment[] @relation("likedCommentRelation")
  
  messages  Message[]
  
  saves    FolderElement[]
  
  mySplaces Splace[] 
  
  hiddenPhotologs Photolog[] @relation("hiddenLogsRelation")
  
  hiddenSeries    Series[]   @relation("hiddenSeriesRelation")

  blockedBy    User[]     @relation("blockRelation")

  blockingUser   User[]     @relation("blockRelation")

  chatrooms ChatroomElement[]

  followedBy FollowLog[] @relation("followLogRelation")

  followings FollowLog[] @relation("followedLogRelation")

  likedPhotologs LikeLog[] @relation("likeLogRelation")
}

model Photolog {
  id Int       @id @default(autoincrement())
  imageUrls  String[]  @db.Text
  photoSize  Int 
  text       String    @db.Text
  createdAt  DateTime  @default(now())
  updatedAt      DateTime   @updatedAt
  likeCount Int @default(0)
  isPrivate Boolean @default(false)
  
  author       User      @relation(fields: [authorId], references: [id])
  authorId     Int
  
  splace     Splace?    @relation(fields: [splaceId], references: [id])
  splaceId   Int?
  
  series     SeriesElement[]
  
  categories   Category[]

  bigCategories BigCategory[]

  scrapedUser ScrapedLog[]

  comments Comment[]

  hiddenBy User[]  @relation("hiddenLogsRelation")

  likedBy LikeLog[] @relation("likedLogRelation")
}

model Series {
  id  Int        @id @default(autoincrement())
  title     String     @db.Text
  createdAt DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  isPrivate Boolean @default(false)
  
  author      User       @relation(fields: [authorId], references: [id])
  authorId    Int

  photologs SeriesElement[]
  
  scrapedUser ScrapedSeries[]

  hiddenBy  User[]   @relation("hiddenSeriesRelation")
  @@unique([title, authorId])
}

model SeriesElement {
  id    Int      @id @default(autoincrement())
  order Int
  createdAt DateTime @default(now())
  
  photolog    Photolog   @relation(fields: [photologId], references: [id])
  photologId  Int
  
  series Series @relation(fields: [seriesId], references: [id])
  seriesId Int
  @@unique([order,photologId,seriesId]) 
}

model Splace {
  id Int     @id @default(autoincrement())
  name     String  @db.Text
  lat Decimal @db.Decimal(11,8)
  long Decimal @db.Decimal(11,8)
  address       String   @db.Text
  detailAddress String? @db.Text
  createdAt   DateTime @default(now())
  updatedAt      DateTime   @updatedAt
  ownerId Int?
  APIId Int?
  parking  Boolean @default(false)
  pets     Boolean @default(false)      
  noKids     Boolean @default(false)
  intro    String? @db.Text
  url      String? @db.Text
  phone    String? @db.Text
  thumbnail String? @db.Text
  activate Boolean @default(false)
  breakDays Int[]
  menuUrls String[] @db.Text
  itemName String? @db.Text
  itemPrice Int?
  holidayBreak Boolean @default(false) 

  businessHours   BusinessHour[]

  owner User? @relation(fields: [ownerId], references: [id])
  
  ratingtags    Ratingtag[]   
  
  categories      Category[]

  bigCategories   BigCategory[]
  
  fixedContents FixedContent[]
  
  photologs Photolog[]
  
  folders       FolderElement[]

  @@unique([name,lat,long])
}

model BusinessHour {
  id Int @id @default(autoincrement())
  open DateTime?  @db.Time()
  close DateTime? @db.Time()
  breakStart DateTime? @db.Time()
  breakStop DateTime? @db.Time()
  day Int
  splace Splace @relation(fields: [splaceId], references: [id])
  splaceId  Int
  createdAt DateTime @default(now())

  @@unique([splaceId,day])
}

model FixedContent {
  id Int      @id @default(autoincrement())
  title          String   @db.Text
  imageUrls       String[]   @db.Text
  photoSize Int @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime   @updatedAt
  text           String  @db.Text
  
  splace         Splace   @relation(fields: [splaceId], references: [id])
  splaceId       Int
}

model FolderElement {
  id    Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  
  splace    Splace   @relation(fields: [splaceId], references: [id])
  splaceId  Int
  
  folder    Folder   @relation(fields: [folderId], references: [id])
  folderId  Int

  savedUser User     @relation(fields: [savedUserId], references: [id])
  savedUserId    Int
  @@unique([splaceId,folderId])
}

model ScrapedLog {
  id    Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  
  photolog    Photolog?   @relation(fields: [photologId], references: [id])
  photologId  Int?
  
  scrapedUser User @relation(fields: [scrapedUserId], references: [id])
  scrapedUserId Int
  @@unique([photologId,scrapedUserId])
}

model ScrapedSeries {
  id    Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  
  series    Series   @relation(fields: [seriesId], references: [id])
  seriesId  Int
  
  scrapedUser User @relation(fields: [scrapedUserId], references: [id])
  scrapedUserId Int
  @@unique([seriesId,scrapedUserId])
}

model Folder {
  id  Int      @id @default(autoincrement())
  title     String   @db.Text
  createdAt DateTime @default(now())
  updatedAt      DateTime   @updatedAt
  
  splaces     FolderElement[]

  members User[]
}

model Category {
  id Int @id @default(autoincrement())
  name     String   @db.Text @unique
  
  photologs Photolog[]
  
  splaces   Splace[]

  createdAt DateTime @default(now())
}

model BigCategory {
  id Int @id @default(autoincrement())
  name     String   @db.Text @unique
  
  photologs Photolog[]
  
  splaces   Splace[]
  
  createdAt DateTime @default(now())
}

model Ratingtag {
  id Int @id @default(autoincrement())
  name     String   @db.Text @unique
  color    String   @db.Text
  
  splaces   Splace[]

  createdAt DateTime @default(now())
}

model Comment {
  id Int @id @default(autoincrement())
  
  text String @db.Text
  createdAt DateTime @default(now())
  updatedAt      DateTime   @updatedAt

  author User @relation(fields: [authorId], references: [id])
  authorId Int

  likedUsers User[] @relation("likedCommentRelation")

  photolog Photolog @relation(fields: [photologId], references: [id])
  photologId Int
}

model PaymentLog {
  id Int @id @default(autoincrement())

  customerId Int
  merchantUId String @db.Text @unique
  credit Int

  creditGiven Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt      DateTime   @updatedAt
}


model Chatroom {
  id Int @id @default(autoincrement())
  title String   @db.Text
  messages Message[]
  isPersonal Boolean

  members ChatroomElement[]

  lastMessage Message? @relation("lastMessageRelation", fields: [lastMessageId], references: [id])
  lastMessageId Int?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model ChatroomElement {
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id])
  userId Int

  chatroom Chatroom @relation(fields: [chatroomId], references: [id])
  chatroomId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([chatroomId,userId])
}

model Message {
  id Int @id @default(autoincrement())
  text String   @db.Text
  author User @relation(fields: [authorId], references: [id])
  authorId Int

  chatroom Chatroom @relation(fields: [chatroomId], references: [id])
  chatroomId Int

  lastSended Chatroom? @relation("lastMessageRelation")

  createdAt DateTime  @default(now())
}

model Report {
  id Int @id @default(autoincrement())
  sourceType String @db.Text
  sourceId Int?
  userId Int
  reason String? @db.Text
  createdAt DateTime @default(now())
}

model FollowLog {
  id Int @id @default(autoincrement())
  target User @relation("followedLogRelation", fields: [targetId], references: [id])
  targetId Int
  requestUser User @relation("followLogRelation", fields: [requestUserId], references: [id])
  requestUserId Int
  createdAt DateTime @default(now())
  @@unique([targetId,requestUserId])
}


model LikeLog {
  id Int @id @default(autoincrement())
  target Photolog @relation("likedLogRelation", fields: [targetId], references: [id])
  targetId Int
  requestUser User @relation("likeLogRelation", fields: [requestUserId], references: [id])
  requestUserId Int
  createdAt DateTime @default(now())
  @@unique([targetId,requestUserId])
}

model Notice {
  id Int @id @default(autoincrement())
  title String @db.Text
  imageUrls  String[]  @db.Text
  text       String[]    @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OwnerInfo {
  id Int @id @default(autoincrement())
  userId Int
  splaceId Int 
  name String @db.Text
  corpNum String @db.Text
  birthDay DateTime
  imageUrls String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@unique([userId,splaceId])
}

model CreditGivenLog {
  id Int @id @default(autoincrement())
  userId Int
  credit Int
  code String @db.Text
  createdAt DateTime @default(now())
  updatedAt      DateTime   @updatedAt
}

model SplaceRating {
  id Int @id @default(autoincrement())
  userId Int
  splaceId Int
  rating Int
  createdAt DateTime @default(now())
  updatedAt      DateTime   @updatedAt
}

model SearchLog {
  id Int @id @default(autoincrement())
  userId Int
  keyword String @db.Text
  createdAt DateTime @default(now())
  updatedAt      DateTime   @updatedAt
}

model SeeSplaceLog {
  id Int @id @default(autoincrement())
  userId Int
  splaceId Int
  createdAt DateTime @default(now())
  updatedAt      DateTime   @updatedAt
}

model SeePhotologLog {
  id Int @id @default(autoincrement())
  userId Int
  photologId Int
  createdAt DateTime @default(now())
  updatedAt      DateTime   @updatedAt  
}

model SeeSeriesLog {
  id Int @id @default(autoincrement())
  userId Int
  seriesId Int
  createdAt DateTime @default(now())
  updatedAt      DateTime   @updatedAt
}

model SeeCategoryLog {
  id Int @id @default(autoincrement())
  userId Int
  categoryId Int
  categoryType Int
  createdAt DateTime @default(now())
  updatedAt      DateTime   @updatedAt
}